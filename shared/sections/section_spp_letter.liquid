{% if section.settings.section_id != blank %}<a id="{{ section.settings.section_id | escape }}"></a>{% endif %}
<section id="{{ section.settings.section_id | default: 'spp-letter' }}-{{ section.id }}" class="spp-letter py-6" style="--accent-start: {{ section.settings.accent_start | default: '#7C3AED' }}; --accent-end: {{ section.settings.accent_end | default: '#8B5CF6' }}; --ink: var(--c-ink-900); --muted: var(--c-ink-700); --card-bg: {{ section.settings.card_bg | default: '#ffffff' }}; --quote-bg: {{ section.settings.quote_bg | default: 'rgba(139,92,246,0.08)' }}; --quote-border: {{ section.settings.quote_border | default: '#8B5CF6' }};">
  <style>
    .spp-letter .card-wrap { position: relative; max-width: 920px; margin: 0 auto; }
    .spp-letter .card { position: relative; background: var(--card-bg); border-radius: 18px; box-shadow: 0 30px 80px rgba(0,0,0,0.12); padding: 36px 28px; overflow: hidden; }
    @media (min-width: 992px){ .spp-letter .card { padding: 42px 48px; } }
    .spp-letter .card::before { content:""; position:absolute; left:0; right:0; top:0; height: 8px; background: linear-gradient(90deg, var(--accent-start), var(--accent-end)); }
    .spp-letter .title { text-align:center; font-size: var(--fs-h2, 32px); color: var(--ink); font-weight: 800; letter-spacing: -0.01em; margin: 4px 0 18px; }
    .spp-letter .title-underline { width: 90px; height: 3px; background: linear-gradient(90deg, var(--accent-start), var(--accent-end)); margin: 0 auto 8px; border-radius: 3px; }

    /* Slider */
    .spp-letter .slides { position: relative; }
    .spp-letter .slide { display: none; opacity: 0; transform: translateY(6px); transition: opacity .25s ease, transform .25s ease; }
    .spp-letter .slide.is-active { display: block; opacity: 1; transform: translateY(0); }
    .spp-letter .dots { display:flex; gap:10px; justify-content:center; margin-top: 16px; }
    .spp-letter .dot { width:10px; height:10px; border-radius:999px; background: rgba(0,0,0,0.15); border:0; padding:0; }
    .spp-letter .dot.is-active { background: var(--accent-end); }

    /* Layout */
    .spp-letter .row { display:grid; grid-template-columns: 1fr; gap: 18px; align-items:start; }
    @media (min-width: 992px){ .spp-letter .row { grid-template-columns: 260px 1fr; gap: 28px; } }

    /* Avatar */
    .spp-letter .avatar { position: relative; width: 180px; height: 180px; border-radius: 50%; overflow:hidden; box-shadow: 0 18px 55px rgba(0,0,0,0.15); }
    .spp-letter .avatar img { width:100%; height:100%; object-fit: cover; display:block; }
    .spp-letter .decor-dot { position:absolute; width: 14px; height:14px; border-radius:50%; background: var(--accent-end); box-shadow: 0 6px 18px rgba(139,92,246,.35); }
    .spp-letter .decor-dot.dot-1 { right: -8px; top: 18px; }
    .spp-letter .decor-dot.dot-2 { left: -10px; bottom: 24px; background: var(--accent-start); }

    /* Letter content */
    .spp-letter .quote { background: var(--quote-bg); border-left: 4px solid var(--quote-border); border-radius: 8px; padding: 14px 16px; color: var(--ink); font-style: italic; margin: 6px 0 16px; }
    .spp-letter .body p { margin: 0 0 10px; color: var(--muted); }
    .spp-letter .body p strong { color: var(--ink); }
    .spp-letter .sig { margin-top: 14px; }
    .spp-letter .sig .name { font-weight: 800; color: var(--ink); }
    .spp-letter .sig .title { color: var(--accent-end); font-weight: 700; text-decoration: none; }
  </style>

  <div class="container">
    <div class="card-wrap">
      {% if section.settings.heading != blank %}
        <div class="title" kjb-settings-id="{{ 'heading' | settings_id: section: section }}">{{ section.settings.heading }}</div>
        <div class="title-underline" aria-hidden="true"></div>
      {% endif %}

      <div class="card">
        <div class="slides" data-slider>
          {% assign count = 0 %}
          {% for block in section.blocks %}
            {% if block.type == 'letter' %}
              {% assign count = count | plus: 1 %}
              <div class="slide" data-slide="{{ count }}">
                <div class="row">
                  <div class="col avatar-col" style="text-align:center;">
                    {% if block.settings.avatar != blank %}
                      <div class="avatar">
                        <img src="{{ block.settings.avatar | image_picker_url: '400x' }}" alt="{{ block.settings.avatar_alt | escape }}" loading="lazy" decoding="async">
                        {% if block.settings.show_dots %}
                          <span class="decor-dot dot-1"></span>
                          <span class="decor-dot dot-2"></span>
                        {% endif %}
                      </div>
                    {% endif %}
                  </div>
                  <div class="col">
                    {% if block.settings.quote != blank %}
                      <div class="quote" kjb-settings-id="{{ 'quote' | settings_id: block: block }}">“{{ block.settings.quote }}”</div>
                    {% endif %}
                    <div class="body" kjb-settings-id="{{ 'body' | settings_id: block: block }}">
                      {% assign paras = block.settings.body | newline_to_br | split: '<br />' %}
                      {% for p in paras %}
                        {% assign t = p | strip %}
                        {% if t != '' %}<p>{{ t }}</p>{% endif %}
                      {% endfor %}
                    </div>
                    <div class="sig">
                      {% if block.settings.author_name != blank %}
                        <div class="name" kjb-settings-id="{{ 'author_name' | settings_id: block: block }}">{{ block.settings.author_name }}</div>
                      {% endif %}
                      {% if block.settings.author_title != blank %}
                        <div class="title" kjb-settings-id="{{ 'author_title' | settings_id: block: block }}">{{ block.settings.author_title }}</div>
                      {% endif %}
                    </div>
                  </div>
                </div>
              </div>
            {% endif %}
          {% endfor %}
        </div>

        {% if count > 1 %}
          <div class="dots" data-dots>
            {% for i in (1..count) %}
              <button class="dot" type="button" data-goto="{{ i }}" aria-label="Go to letter {{ i }}"></button>
            {% endfor %}
          </div>
        {% endif %}
      </div>
    </div>
  </div>

  <script>
    (function(){
      try {
        var sectionEl = document.currentScript.closest('section');
        var slides = sectionEl.querySelectorAll('[data-slide]');
        var dots = sectionEl.querySelectorAll('[data-goto]');
        if (!slides.length) return;
        var index = 1;
        function show(i){
          index = i; if (index < 1) index = 1; if (index > slides.length) index = slides.length;
          slides.forEach(function(s){ s.classList.toggle('is-active', s.getAttribute('data-slide') == index); });
          dots.forEach(function(d){ d.classList.toggle('is-active', d.getAttribute('data-goto') == index); });
        }
        dots.forEach(function(d){ d.addEventListener('click', function(){ show(parseInt(d.getAttribute('data-goto'))); }); });
        // init
        show(1);
      } catch(e) { /* noop */ }
    })();
  </script>
</section>

{% schema %}
{
  "name": "SPP Letter",
  "elements": [
    {"type": "header", "content": "General"},
    {"type": "text", "id": "section_id", "label": "Section ID", "default": "spp-letter"},
    {"type": "text", "id": "heading", "label": "Heading", "default": "Why I Created This Program"},
    {"type": "header", "content": "Design"},
    {"type": "text", "id": "accent_start", "label": "Accent gradient start", "default": "#7C3AED"},
    {"type": "text", "id": "accent_end", "label": "Accent gradient end", "default": "#8B5CF6"},
    {"type": "text", "id": "card_bg", "label": "Card background", "default": "#FFFFFF"},
    {"type": "text", "id": "quote_bg", "label": "Quote background", "default": "rgba(139,92,246,0.08)"},
    {"type": "text", "id": "quote_border", "label": "Quote border color", "default": "#8B5CF6"}
  ],
  "blocks": [
    {
      "type": "letter",
      "name": "Letter",
      "elements": [
        {"type": "image_picker", "id": "avatar", "label": "Avatar image"},
        {"type": "text", "id": "avatar_alt", "label": "Avatar alt"},
        {"type": "checkbox", "id": "show_dots", "label": "Show decorative dots", "default": true},
        {"type": "textarea", "id": "quote", "label": "Pull quote"},
        {"type": "textarea", "id": "body", "label": "Letter body (paragraphs on new lines)", "default": "I was tired of meeting families after things had fallen apart. I wanted to reach parents while there was still time to build something beautiful.\nThis program isn't just my clinical knowledge — it's my personal journey, my family's transformation, and everything I wish someone had taught me before I became a parent.\nI can't promise you'll never have hard moments with your kids. But I can promise you'll have the tools to turn those moments into connection instead of disconnection.\nYour children don't need a perfect parent. They need a parent who can show up, mess up, and repair. That's what I'll teach you to do."},
        {"type": "text", "id": "author_name", "label": "Author name", "default": "Eli Harwood, LPC"},
        {"type": "text", "id": "author_title", "label": "Author title", "default": "Licensed Therapist & Chief Attachment Nerd"}
      ]
    }
  ],
  "presets": [
    {
      "name": "SPP Letter",
      "category": "Content",
      "blocks": [
        {"type": "letter"}
      ]
    }
  ]
}
{% endschema %}
