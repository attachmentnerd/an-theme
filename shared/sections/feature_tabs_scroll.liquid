<section class="agents-showcase-section py-5" style="background-color: {{ section.settings.bg_color | default: '#f8f8f8' }};">
  <div class="container">
    <!-- Header -->
    <div class="text-center mb-5">
      <h2 class="agents-showcase__title" style="font-size: var(--fs-display); color: var(--c-ink-900); font-weight: 500;">
        {{ section.settings.title | default: 'Agents that scale across every workflow' }}
      </h2>
      {% if section.settings.subtitle %}
        <p class="agents-showcase__subtitle" style="font-size: var(--fs-body-lg); color: var(--c-ink-700); margin-top: 1rem; max-width: 800px; margin-left: auto; margin-right: auto;">
          {{ section.settings.subtitle }}
        </p>
      {% endif %}
      {% if section.settings.enable_scroll_trigger %}
        <div class="agents-showcase__progress" aria-hidden="true">
          <div class="progress-dots">
            {% for block in section.blocks %}
              <span class="progress-dot {% if forloop.first %}active{% endif %}" data-index="{{ forloop.index0 }}"></span>
            {% endfor %}
          </div>
        </div>
      {% endif %}
    </div>

    <!-- Tabs and Content Container -->
    <div class="agents-showcase__container">
      <div class="row">
        <!-- Sticky Tabs Column -->
        <div class="col-lg-4">
          <div class="agents-showcase__tabs-column">
            <div class="agents-showcase__tabs-placeholder"></div>
            <div class="agents-showcase__tabs-wrapper">
              <div class="agents-showcase__tabs" role="tablist">
                {% for block in section.blocks %}
                  <a href="#agent-panel-{{ forloop.index0 }}"
                     class="agents-showcase__tab {% if forloop.first %}active{% endif %}"
                     data-tab-index="{{ forloop.index0 }}"
                     role="tab"
                     aria-selected="{% if forloop.first %}true{% else %}false{% endif %}">
                    <div class="tab-number">{{ block.settings.tab_number | default: forloop.index | prepend: '0' }}</div>
                    <div class="tab-title">{{ block.settings.tab_title }}</div>
                  </a>
                {% endfor %}
              </div>
            </div>
          </div>
        </div>

        <!-- Scrollable Content Column -->
        <div class="col-lg-8">
          <div class="agents-showcase__content" id="agents-content-{{ section.id }}">
            {% for block in section.blocks %}
              <div class="agents-showcase__panel {% if forloop.first %}in-view{% endif %}"
                   id="agent-panel-{{ forloop.index0 }}"
                   data-panel-index="{{ forloop.index0 }}"
                   role="tabpanel">
                <div class="panel-card" style="background-color: {{ block.settings.card_bg_color | default: '#e8f5e8' }};">
                  <!-- Panel Header -->
                  <div class="panel-header">
                    <h3 class="panel-title">{{ block.settings.panel_title }}</h3>
                    {% if block.settings.show_cta %}
                      <a href="{{ block.settings.cta_url }}"
                         class="btn btn-dark panel-cta"
                         {% if block.settings.cta_new_tab %}target="_blank" rel="noopener"{% endif %}>
                        {{ block.settings.cta_text | default: 'Try it now' }}
                      </a>
                    {% endif %}
                  </div>

                  <!-- Panel Description -->
                  <div class="panel-description">
                    {{ block.settings.description }}
                  </div>

                  <!-- Panel Image/Content -->
                  {% if block.settings.content_image %}
                    <div class="panel-image-container mt-4">
                      {% render 'responsive-image',
  image: block.settings.content_image,
  alt: '{{ block.settings.image_alt }}',
  class: 'panel-image img-fluid',
  sizes: '(max-width: 767px) 100vw, (max-width: 991px) 50vw, 33vw',
  aspect_ratio: '16/9',
  widths: '400,600,800,1200,1600',
  placeholder_type: 'default',
  blur_up: true
%}
                    </div>
                  {% endif %}

                  <!-- Optional Additional Content -->
                  {% if block.settings.additional_content %}
                    <div class="panel-additional-content mt-3">
                      {{ block.settings.additional_content }}
                    </div>
                  {% endif %}
                </div>
              </div>
            {% endfor %}
          </div>
        </div>
      </div>
    </div>

    {% if section.settings.enable_scroll_trigger %}
      <div class="agents-showcase__scroll-hint">
        <span>Scroll to explore</span>
        <svg class="scroll-arrow" viewBox="0 0 24 24" fill="none">
          <path d="M12 5v14M12 19l-7-7M12 19l7-7" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </div>
    {% endif %}
  </div>
</section>

<style>
  .agents-showcase-section {
    overflow: hidden;
  }

  .agents-showcase__title {
    margin-bottom: 0;
    line-height: 1.2;
  }

  .agents-showcase__subtitle {
    line-height: 1.6;
    opacity: 0.9;
  }

  /* Container needs relative positioning */
  .agents-showcase__container {
    position: relative;
    min-height: 100vh; /* Ensure container is tall enough */
  }

  /* Tabs column for absolute positioning context */
  .agents-showcase__tabs-column {
    position: relative;
  }

  /* Placeholder to prevent layout jump */
  .agents-showcase__tabs-placeholder {
    display: none;
  }

  /* Sticky Tabs Container - Will be made sticky via JS */
  .agents-showcase__tabs-wrapper {
    position: relative;
    transition: none; /* Disable transition during position changes */
  }

  .agents-showcase__tabs-wrapper.is-sticky {
    position: fixed !important;
    z-index: 100;
  }

  /* When sticky, show placeholder */
  .agents-showcase__tabs-column:has(.is-sticky) .agents-showcase__tabs-placeholder {
    display: block;
  }

  /* Tabs Styling */
  .agents-showcase__tabs {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    padding: 2rem;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 16px;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.06);
    border: 1px solid rgba(0, 0, 0, 0.05);
  }

  .agents-showcase__tab {
    display: flex;
    align-items: center;
    gap: 1.25rem;
    padding: 1.25rem 1.75rem;
    background: transparent;
    border: 2px solid transparent;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
    transform: translateX(0);
    text-decoration: none;
    color: inherit;
  }

  .agents-showcase__tab::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 0;
    background: var(--c-brand-600);
    transition: height 0.3s ease;
    border-radius: 2px;
  }

  .agents-showcase__tab:hover {
    background: rgba(94, 59, 255, 0.04);
    border-color: rgba(94, 59, 255, 0.15);
    transform: translateX(4px);
  }

  .agents-showcase__tab.active {
    background: var(--c-brand-100);
    border-color: var(--c-brand-600);
    transform: translateX(8px);
    box-shadow: 0 4px 16px rgba(94, 59, 255, 0.1);
  }

  .agents-showcase__tab.active::before {
    height: 70%;
  }

  .tab-number {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--c-ink-400);
    min-width: 3rem;
    transition: all 0.2s ease;
    font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
  }

  .agents-showcase__tab:hover .tab-number {
    color: var(--c-brand-600);
  }

  .agents-showcase__tab.active .tab-number {
    color: var(--c-brand-600);
    transform: scale(1.05);
  }

  .tab-title {
    font-size: 1.125rem;
    color: var(--c-ink-600);
    font-weight: 500;
    transition: all 0.2s ease;
    line-height: 1.4;
  }

  .agents-showcase__tab:hover .tab-title {
    color: var(--c-ink-800);
  }

  .agents-showcase__tab.active .tab-title {
    color: var(--c-ink-900);
    font-weight: 600;
  }

  /* Content Panels - Now scrollable */
  .agents-showcase__content {
    display: flex;
    flex-direction: column;
    gap: 3rem;
    padding-left: 2rem;
  }

  .agents-showcase__panel {
    scroll-margin-top: 120px; /* Account for sticky header + padding */
    min-height: 700px; /* Ensure panels are tall enough to scroll */
    opacity: 0.4;
    transition: opacity 0.3s ease;
  }

  .agents-showcase__panel.in-view {
    opacity: 1;
  }

  .panel-card {
    padding: 3rem;
    border-radius: 20px;
    height: 100%;
    min-height: 500px;
    display: flex;
    flex-direction: column;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
  }

  .agents-showcase__panel.in-view .panel-card {
    transform: translateY(-4px);
    box-shadow: 0 12px 48px rgba(0, 0, 0, 0.12);
  }

  .panel-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 2rem;
    flex-wrap: wrap;
    gap: 1.5rem;
  }

  .panel-title {
    font-size: var(--fs-h1);
    font-family: var(--font-serif);
    font-weight: 400;
    color: var(--c-ink-900);
    margin: 0;
    line-height: 1.2;
    flex: 1;
    letter-spacing: -0.02em;
  }

  .panel-cta {
    background: var(--g-brand);
    color: var(--c-white) !important;
    padding: 12px 32px;
    border: none;
    border-radius: var(--radius-pill);
    font-weight: 600;
    font-size: var(--fs-body);
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    box-shadow:
      0 0 0 2px rgba(255, 255, 255, 0.25) inset,
      0 4px 8px rgba(94, 59, 255, 0.35);
    transition:
      transform var(--motion-duration-fast) var(--motion-ease-standard),
      box-shadow var(--motion-duration-fast) var(--motion-ease-standard);
    white-space: nowrap;
  }

  .panel-cta:hover {
    transform: translateY(-2px);
    box-shadow:
      0 0 0 2px rgba(255, 255, 255, 0.25) inset,
      0 8px 16px rgba(94, 59, 255, 0.4);
    color: var(--c-white) !important;
  }

  .panel-description {
    font-size: 1.25rem;
    line-height: 1.7;
    color: var(--c-ink-600);
    margin-bottom: 2.5rem;
    max-width: 90%;
  }

  /* Support for HTML formatting in descriptions */
  .panel-description strong {
    font-weight: 700;
    color: var(--c-ink-800);
  }

  .panel-description em {
    font-style: italic;
  }

  .panel-description ul,
  .panel-description ol {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .panel-description li {
    margin-bottom: 0.5rem;
  }

  .panel-description a {
    color: var(--c-brand-600);
    text-decoration: underline;
    transition: color 0.2s ease;
  }

  .panel-description a:hover {
    color: var(--c-brand-800);
  }

  .panel-image-container {
    margin-top: auto;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  }

  .panel-image {
    width: 100%;
    height: auto;
    display: block;
  }

  .panel-additional-content {
    font-size: 0.9rem;
    color: var(--c-ink-600);
    line-height: 1.5;
  }

  /* Scroll progress indicator */
  .agents-showcase__tab::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 3px;
    background: var(--c-brand-600);
    transition: width 0.3s ease;
    opacity: 0;
    transform-origin: left center;
  }

  .agents-showcase__tab.active::after {
    opacity: 1;
    width: 100%;
  }

  /* Progress dots */
  .agents-showcase__progress {
    margin-top: 1.5rem;
  }

  .progress-dots {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
  }

  .progress-dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .progress-dot.active {
    width: 24px;
    border-radius: 4px;
    background: var(--c-brand-600);
  }

  /* Scroll hint */
  .agents-showcase__scroll-hint {
    text-align: center;
    margin-top: 3rem;
    font-size: 0.9375rem;
    color: var(--c-ink-500);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    animation: bounce 3s ease-in-out infinite;
    font-weight: 500;
    letter-spacing: 0.02em;
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(-8px);
    }
    60% {
      transform: translateY(-4px);
    }
  }

  .scroll-arrow {
    width: 24px;
    height: 24px;
    stroke: var(--c-brand-600);
    stroke-width: 2.5;
  }

  /* Scroll-snap for mobile */
  @media (max-width: 991px) {
    .agents-showcase__tabs {
      scroll-snap-type: x mandatory;
      scroll-behavior: smooth;
    }

    .agents-showcase__tab {
      scroll-snap-align: start;
    }
  }

  /* Mobile Responsive */
  @media (max-width: 991px) {
    /* On mobile, tabs are at the top, not sticky */
    .agents-showcase__tabs-wrapper {
      position: relative;
      top: auto;
      margin-bottom: 2rem;
    }

    .agents-showcase__tabs {
      flex-direction: row;
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
      scrollbar-width: none;
      -ms-overflow-style: none;
      padding-bottom: 1rem;
      padding-right: 0;
      gap: 0.5rem;
    }

    .agents-showcase__tabs::-webkit-scrollbar {
      display: none;
    }

    .agents-showcase__tab {
      flex: 0 0 auto;
      white-space: nowrap;
      padding: 0.75rem 1.25rem;
    }

    .agents-showcase__tab::before {
      display: none;
    }

    .agents-showcase__tab.active {
      background: var(--c-brand-100);
    }

    .agents-showcase__panel {
      min-height: auto;
      scroll-margin-top: 20px;
    }

    .panel-card {
      padding: 1.5rem;
    }

    .panel-title {
      font-size: 1.5rem;
    }

    .panel-description {
      font-size: 1rem;
    }

    .tab-number {
      font-size: 1rem;
    }

    .tab-title {
      font-size: 0.9rem;
    }
  }

  @media (max-width: 767px) {
    .panel-header {
      flex-direction: column;
      align-items: flex-start;
    }

    .panel-cta {
      width: 100%;
      text-align: center;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const section = document.querySelector('.agents-showcase-section');
    if (!section) return;

    const tabs = section.querySelectorAll('.agents-showcase__tab');
    const panels = section.querySelectorAll('.agents-showcase__panel');
    const progressDots = section.querySelectorAll('.progress-dot');
    const enableScrollSpy = {{ section.settings.enable_scroll_trigger | default: true }};

    // Sticky tabs elements
    const tabsWrapper = section.querySelector('.agents-showcase__tabs-wrapper');
    const tabsColumn = section.querySelector('.agents-showcase__tabs-column');
    const placeholder = section.querySelector('.agents-showcase__tabs-placeholder');
    const container = section.querySelector('.agents-showcase__container');

    let currentIndex = -1;
    let isScrolling = false;

    // Calculate sticky offset based on Kajabi header
    function getStickyOffset() {
      // Try to find Kajabi's header
      const header = document.querySelector('.header, .navigation, header, [class*="header"]');
      if (header && header.offsetHeight > 0) {
        return header.offsetHeight + 20; // Add 20px padding
      }
      return 80; // Default fallback
    }

    let stickyOffset = getStickyOffset();

    // Initialize sticky behavior
    function initStickyTabs() {
      if (!tabsWrapper || window.innerWidth <= 991) return;

      // Calculate dimensions
      const wrapperHeight = tabsWrapper.offsetHeight;
      const columnWidth = tabsColumn.offsetWidth;

      // Set placeholder height to prevent layout jump
      placeholder.style.height = wrapperHeight + 'px';

      // Function to update sticky state
      function updateStickyState() {
        const containerRect = container.getBoundingClientRect();
        const wrapperRect = tabsWrapper.getBoundingClientRect();
        const contentHeight = container.offsetHeight;

        // Check if we should stick
        if (containerRect.top <= stickyOffset &&
            containerRect.bottom > stickyOffset + wrapperHeight) {
          // Make sticky
          if (!tabsWrapper.classList.contains('is-sticky')) {
            tabsWrapper.classList.add('is-sticky');
            tabsWrapper.style.position = 'fixed';
            tabsWrapper.style.top = stickyOffset + 'px';
            tabsWrapper.style.left = tabsColumn.getBoundingClientRect().left + 'px';
            tabsWrapper.style.width = columnWidth + 'px';
          }
        } else if (containerRect.bottom <= stickyOffset + wrapperHeight) {
          // Stick to bottom of container
          tabsWrapper.classList.remove('is-sticky');
          tabsWrapper.style.position = 'absolute';
          tabsWrapper.style.top = 'auto';
          tabsWrapper.style.bottom = '0';
          tabsWrapper.style.left = '0';
          tabsWrapper.style.width = '100%';
        } else {
          // Reset to normal
          tabsWrapper.classList.remove('is-sticky');
          tabsWrapper.style.position = '';
          tabsWrapper.style.top = '';
          tabsWrapper.style.left = '';
          tabsWrapper.style.width = '';
          tabsWrapper.style.bottom = '';
        }
      }

      // Update on scroll
      window.addEventListener('scroll', updateStickyState, { passive: true });
      window.addEventListener('resize', () => {
        // Recalculate dimensions on resize
        if (tabsWrapper.classList.contains('is-sticky')) {
          tabsWrapper.style.width = tabsColumn.offsetWidth + 'px';
          tabsWrapper.style.left = tabsColumn.getBoundingClientRect().left + 'px';
        }
      });

      // Initial check
      updateStickyState();
    }

    // Initialize sticky tabs
    initStickyTabs();

    // Update active tab based on index
    function setActiveTab(index) {
      if (index === currentIndex) return;

      // Remove active class from all
      tabs.forEach(tab => {
        tab.classList.remove('active');
        tab.setAttribute('aria-selected', 'false');
      });
      progressDots.forEach(dot => dot.classList.remove('active'));
      panels.forEach(panel => panel.classList.remove('in-view'));

      // Add active class to current
      if (tabs[index]) {
        tabs[index].classList.add('active');
        tabs[index].setAttribute('aria-selected', 'true');

        // Add in-view class to panel
        if (panels[index]) {
          panels[index].classList.add('in-view');
        }

        // Update progress dot
        if (progressDots[index]) {
          progressDots[index].classList.add('active');
        }

        // Scroll tab into view on mobile
        if (window.innerWidth <= 991) {
          const tabsContainer = section.querySelector('.agents-showcase__tabs');
          const activeTab = tabs[index];
          if (tabsContainer && activeTab) {
            const scrollLeft = activeTab.offsetLeft - (tabsContainer.offsetWidth / 2) + (activeTab.offsetWidth / 2);
            tabsContainer.scrollTo({
              left: Math.max(0, scrollLeft),
              behavior: 'smooth'
            });
          }
        }

        currentIndex = index;
      }
    }

    // Find which panel is currently in view
    function updateActivePanel() {
      if (!enableScrollSpy || isScrolling) return;

      const scrollPosition = window.scrollY;
      const windowHeight = window.innerHeight;

      // Find the panel that's most in view
      let activeIndex = 0;
      let maxVisibility = 0;

      panels.forEach((panel, index) => {
        const rect = panel.getBoundingClientRect();
        const panelTop = rect.top;
        const panelBottom = rect.bottom;
        const panelHeight = rect.height;

        // Calculate how much of the panel is visible
        const visibleTop = Math.max(0, Math.min(panelBottom, windowHeight));
        const visibleBottom = Math.max(0, Math.min(windowHeight, windowHeight - panelTop));
        const visibleHeight = Math.min(visibleTop, visibleBottom);
        const visibilityRatio = visibleHeight / panelHeight;

        // If this panel is more visible than previous ones, it's our active panel
        if (visibilityRatio > maxVisibility) {
          maxVisibility = visibilityRatio;
          activeIndex = index;
        }
      });

      setActiveTab(activeIndex);
    }

    // Smooth scroll to panel when tab is clicked
    function scrollToPanel(index) {
      const panel = panels[index];
      if (panel) {
        isScrolling = true;
        panel.scrollIntoView({ behavior: 'smooth', block: 'start' });

        // Re-enable scroll spy after animation
        setTimeout(() => {
          isScrolling = false;
        }, 1000);
      }
    }

    // Handle tab clicks
    tabs.forEach((tab, index) => {
      tab.addEventListener('click', (e) => {
        e.preventDefault();
        scrollToPanel(index);
        setActiveTab(index);
      });
    });

    // Handle progress dot clicks
    progressDots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        scrollToPanel(index);
        setActiveTab(index);
      });
    });

    // Set up scroll listener
    if (enableScrollSpy) {
      let scrollTimeout;

      window.addEventListener('scroll', () => {
        if (!scrollTimeout) {
          scrollTimeout = setTimeout(() => {
            scrollTimeout = null;
            updateActivePanel();
          }, 50);
        }
      }, { passive: true });

      // Initial check
      updateActivePanel();
    }

    // Handle window resize
    window.addEventListener('resize', () => {
      updateActivePanel();
    });
  });
</script>

{% schema %}
{
  "name": "Feature - Tabs Scroll",
  "class": "agents-showcase",
  "elements": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Agents that scale across every workflow"
    },
    {
      "type": "textarea",
      "id": "subtitle",
      "label": "Section Subtitle",
      "placeholder": "Add a descriptive subtitle to provide more context"
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background Color",
      "default": "#f8f8f8"
    },
    {
      "type": "checkbox",
      "id": "enable_scroll_trigger",
      "label": "Enable Scroll-triggered Animation",
      "default": true,
      "info": "Tabs change as user scrolls through the section"
    }
  ],
  "blocks": [
    {
      "type": "agent_tab",
      "name": "Feature - Tabs Scroll",
      "elements": [
        {
          "type": "text",
          "id": "tab_number",
          "label": "Tab Number",
          "default": "01"
        },
        {
          "type": "text",
          "id": "tab_title",
          "label": "Tab Title",
          "default": "Document analysis agents"
        },
        {
          "type": "text",
          "id": "panel_title",
          "label": "Panel Title",
          "default": "Read 10,000 documents and extract critical insights in seconds"
        },
        {
          "type": "textarea",
          "id": "description",
          "label": "Description (HTML Supported)",
          "default": "Scan contracts, invoices, and reports for red flags and hidden gems. Turn documents into structured and actionable data in Airtable.",
          "info": "You can use HTML tags like <strong>, <em>, <span style='color: #color'>, <br> for formatting"
        },
        {
          "type": "checkbox",
          "id": "show_cta",
          "label": "Show CTA Button",
          "default": true
        },
        {
          "type": "text",
          "id": "cta_text",
          "label": "CTA Button Text",
          "default": "Try it now"
        },
        {
          "type": "text",
          "id": "cta_url",
          "label": "CTA URL",
          "default": "#"
        },
        {
          "type": "checkbox",
          "id": "cta_new_tab",
          "label": "Open CTA in New Tab",
          "default": false
        },
        {
          "type": "image_picker",
          "id": "content_image",
          "label": "Content Image",
          "info": "Upload an image to display in the panel"
        },
        {
          "type": "text",
          "id": "image_alt",
          "label": "Image Alt Text",
          "default": "Agent showcase image"
        },
        {
          "type": "color",
          "id": "panel_bg_color",
          "label": "Panel Background Color",
          "default": "#ffffff",
          "info": "Background color for the entire content area when this tab is active"
        },
        {
          "type": "color",
          "id": "card_bg_color",
          "label": "Card Background Color",
          "default": "#e8f5e8"
        },
        {
          "type": "textarea",
          "id": "additional_content",
          "label": "Additional Content (HTML Supported)",
          "info": "Optional content below the image. HTML tags supported: <strong>, <em>, <span style='color: #color'>, <br>, <ul>, <li>"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Feature - Tabs Scroll",
      "category": "Content",
      "description": "Showcase different agent capabilities with auto-scrolling tabs",
      "blocks": [
        {
          "type": "agent_tab",
          "settings": {
            "tab_number": "01",
            "tab_title": "Document analysis agents",
            "panel_title": "Read 10,000 documents and extract critical insights in seconds",
            "description": "Scan contracts, invoices, and reports for <strong style='color: #e74c3c;'>red flags</strong> and <strong style='color: #27ae60;'>hidden gems</strong>. Turn documents into structured and actionable data in Airtable.",
            "show_cta": true,
            "cta_text": "Try it now",
            "panel_bg_color": "#f0fdf0",
            "card_bg_color": "#e8f5e8"
          }
        },
        {
          "type": "agent_tab",
          "settings": {
            "tab_number": "02",
            "tab_title": "Web search agents",
            "panel_title": "Research any topic across millions of web pages instantly",
            "description": "Get comprehensive research reports with citations and summaries. Perfect for market research, competitor analysis, and trend tracking.",
            "show_cta": true,
            "cta_text": "Try it now",
            "panel_bg_color": "#f0f9ff",
            "card_bg_color": "#e6f3ff"
          }
        },
        {
          "type": "agent_tab",
          "settings": {
            "tab_number": "03",
            "tab_title": "Image generation agents",
            "panel_title": "Create stunning visuals from text descriptions",
            "description": "Generate professional images, illustrations, and graphics on demand. Perfect for marketing materials, presentations, and creative projects.",
            "show_cta": true,
            "cta_text": "Try it now",
            "panel_bg_color": "#fff0f7",
            "card_bg_color": "#ffe6f0"
          }
        },
        {
          "type": "agent_tab",
          "settings": {
            "tab_number": "04",
            "tab_title": "Custom agents",
            "panel_title": "Build custom AI agents tailored to your workflow",
            "description": "Create specialized agents that understand your business processes and automate repetitive tasks with precision and intelligence.",
            "show_cta": true,
            "cta_text": "Try it now",
            "panel_bg_color": "#f7f0ff",
            "card_bg_color": "#f0e6ff"
          }
        }
      ]
    }
  ]
}
{% endschema %}
