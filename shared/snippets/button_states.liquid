{% comment %}
  Enhanced Button States Component
  Provides loading spinner and success checkmark animations
  Usage: {% include 'button_states' %}
{% endcomment %}

<style>
  /* ==========================================================================
     Button State Animations
     ========================================================================== */
  
  /* Button with states */
  .btn-with-states {
    position: relative;
    transition: all 0.3s var(--ease-spring);
    overflow: hidden;
  }
  
  .btn-with-states .btn-text {
    transition: opacity 0.2s ease, transform 0.2s ease;
  }
  
  /* Loading state */
  .btn-with-states.is-loading .btn-text {
    opacity: 0;
    transform: scale(0.8);
  }
  
  .btn-with-states.is-loading {
    pointer-events: none;
    color: transparent !important;
  }
  
  /* Success state */
  .btn-with-states.is-success .btn-text {
    opacity: 0;
    transform: scale(0.8);
  }
  
  .btn-with-states.is-success {
    background: var(--c-accent-teal) !important;
    border-color: var(--c-accent-teal) !important;
    pointer-events: none;
  }
  
  /* Spinner */
  .btn-spinner {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 20px;
    height: 20px;
    opacity: 0;
    transition: opacity 0.2s ease;
  }
  
  .btn-with-states.is-loading .btn-spinner {
    opacity: 1;
  }
  
  .btn-spinner::after {
    content: '';
    position: absolute;
    width: 16px;
    height: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top-color: var(--c-white);
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
  }
  
  /* Success checkmark */
  .btn-success-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0);
    width: 24px;
    height: 24px;
    opacity: 0;
    transition: all 0.3s var(--ease-spring);
  }
  
  .btn-with-states.is-success .btn-success-icon {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
    animation: successPulse 0.5s ease;
  }
  
  /* SVG checkmark animation */
  .btn-success-icon svg {
    width: 100%;
    height: 100%;
  }
  
  .btn-success-icon path {
    stroke-dasharray: 28;
    stroke-dashoffset: 28;
    animation: checkmark 0.4s ease 0.1s forwards;
  }
  
  /* Ripple effect on click */
  .btn-ripple {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.5);
    transform: scale(0);
    animation: ripple 0.6s ease-out;
    pointer-events: none;
  }
  
  /* Animations */
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  @keyframes checkmark {
    to { stroke-dashoffset: 0; }
  }
  
  @keyframes successPulse {
    0% { transform: translate(-50%, -50%) scale(0); }
    50% { transform: translate(-50%, -50%) scale(1.2); }
    100% { transform: translate(-50%, -50%) scale(1); }
  }
  
  @keyframes ripple {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }
  
  /* Form feedback messages */
  .form-feedback {
    margin-top: 1rem;
    padding: 12px 16px;
    border-radius: 8px;
    font-size: var(--fs-caption);
    opacity: 0;
    transform: translateY(-10px);
    transition: all 0.3s ease;
  }
  
  .form-feedback.show {
    opacity: 1;
    transform: translateY(0);
  }
  
  .form-feedback.success {
    background: rgba(24, 213, 228, 0.1);
    color: var(--c-accent-teal);
    border: 1px solid rgba(24, 213, 228, 0.2);
  }
  
  .form-feedback.error {
    background: rgba(255, 139, 203, 0.1);
    color: #E53E3E;
    border: 1px solid rgba(255, 139, 203, 0.2);
  }
  
  /* Button group animations */
  .btn-group-animated .btn {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeUpIn 0.5s var(--ease-spring) forwards;
  }
  
  .btn-group-animated .btn:nth-child(1) { animation-delay: 0.1s; }
  .btn-group-animated .btn:nth-child(2) { animation-delay: 0.2s; }
  .btn-group-animated .btn:nth-child(3) { animation-delay: 0.3s; }
  
  @keyframes fadeUpIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Button state management
  document.addEventListener('DOMContentLoaded', function() {
    // Add button HTML structure
    function enhanceButton(button) {
      if (!button.classList.contains('btn-enhanced')) {
        button.classList.add('btn-enhanced', 'btn-with-states');
        const text = button.innerHTML;
        button.innerHTML = `
          <span class="btn-text">${text}</span>
          <span class="btn-spinner"></span>
          <span class="btn-success-icon">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M5 13L9 17L19 7" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </span>
        `;
      }
    }
    
    // Add ripple effect
    function createRipple(event) {
      const button = event.currentTarget;
      const ripple = document.createElement('span');
      const rect = button.getBoundingClientRect();
      const size = Math.max(rect.width, rect.height);
      const x = event.clientX - rect.left - size / 2;
      const y = event.clientY - rect.top - size / 2;
      
      ripple.style.width = ripple.style.height = size + 'px';
      ripple.style.left = x + 'px';
      ripple.style.top = y + 'px';
      ripple.classList.add('btn-ripple');
      
      button.appendChild(ripple);
      
      setTimeout(() => ripple.remove(), 600);
    }
    
    // Handle form submissions
    document.querySelectorAll('form').forEach(form => {
      const submitBtn = form.querySelector('button[type="submit"], input[type="submit"]');
      if (submitBtn && submitBtn.tagName === 'BUTTON') {
        enhanceButton(submitBtn);
        
        // Add ripple on click
        submitBtn.addEventListener('click', createRipple);
        
        form.addEventListener('submit', function(e) {
          // Don't prevent default - let Kajabi handle the form
          submitBtn.classList.add('is-loading');
          
          // Simulate success after form processes (adjust timing as needed)
          setTimeout(() => {
            submitBtn.classList.remove('is-loading');
            submitBtn.classList.add('is-success');
            
            // Show feedback message if container exists
            const feedback = form.querySelector('.form-feedback');
            if (feedback) {
              feedback.classList.add('show');
            }
            
            // Reset after delay
            setTimeout(() => {
              submitBtn.classList.remove('is-success');
              if (feedback) {
                feedback.classList.remove('show');
              }
            }, 3000);
          }, 2000);
        });
      }
    });
    
    // Enhance standalone CTAs
    document.querySelectorAll('.btn-primary-modern, .btn-secondary-modern').forEach(btn => {
      if (btn.tagName === 'BUTTON' && !btn.closest('form')) {
        btn.addEventListener('click', createRipple);
      }
    });
  });
</script>