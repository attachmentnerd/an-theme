{% comment %}
  Image Performance Optimization - Conservative Approach
  Only targets hero/LCP images to avoid breaking other functionality
{% endcomment %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Only target the first large image (typically the LCP element)
  const firstLargeImage = document.querySelector('.block:first-child img, .hero img, #block-1614038893199_0 img');
  
  if (firstLargeImage) {
    // Ensure hero image loads immediately
    firstLargeImage.loading = 'eager';
    firstLargeImage.setAttribute('fetchpriority', 'high');
    
    // Preload this specific image
    const preload = document.createElement('link');
    preload.rel = 'preload';
    preload.as = 'image';
    preload.href = firstLargeImage.src;
    preload.setAttribute('fetchpriority', 'high');
    document.head.appendChild(preload);
  }
  
  // Only set lazy loading on images that are definitely below the fold
  const belowFoldImages = document.querySelectorAll('.block:nth-child(n+4) img');
  belowFoldImages.forEach(img => {
    if (!img.loading || img.loading === 'auto') {
      img.loading = 'lazy';
    }
  });
});
</script>

<style>
  /* Conservative image optimizations - only for hero/LCP images */
  
  /* Target only the first/hero image for GPU acceleration */
  .block:first-child img,
  .hero img,
  #block-1614038893199_0 img {
    transform: translateZ(0);
    backface-visibility: hidden;
  }
  
  /* Basic responsive image rules that won't break anything */
  img {
    max-width: 100%;
    height: auto;
  }
</style>