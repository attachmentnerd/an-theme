{% comment %}
  Modern Video Player Carousel
  Shows course videos in a horizontal carousel layout
{% endcomment %}

<div class="player__carousel">
  <!-- Previous Button -->
  <button class="carousel__nav carousel__nav--prev" id="carouselPrev" aria-label="Previous videos">
    <i class="fa fa-chevron-left"></i>
  </button>

  <!-- Carousel Container -->
  <div class="carousel__track-container">
    <div class="carousel__track" id="carouselTrack">
      {% for p in post.category.posts %}
        <div class="carousel__item">
          {% if post.id == p.id %}
            <a href="{{ p.url }}" class="video-card video-card--active {% if p.completed? %}video-card--completed{% endif %}">
          {% else %}
            <a href="{{ p.url }}" class="video-card {% if p.completed? %}video-card--completed{% endif %}">
          {% endif %}
            <div class="video-card__thumb-container">
              {% if p.poster_image_url %}
                <img src="{{ p.poster_image_url }}" alt="{{ p.title }}" class="video-card__thumb">
              {% else %}
                <img src="{{ 'placeholder.png' | asset_url }}" alt="{{ p.title }}" class="video-card__thumb">
              {% endif %}
              
              <!-- Completion check mark -->
              <div class="video-card__check">
                <i class="fa fa-check"></i>
              </div>
              
              <!-- Progress bar -->
              {% unless p.completed? %}
                {% if p.progress_percent and p.progress_percent > 0 %}
                  <div class="video-card__progress">
                    <div class="video-card__progress-fill" style="width: {{ p.progress_percent }}%"></div>
                  </div>
                {% endif %}
              {% endunless %}
            </div>
            
            <h4 class="video-card__title">{{ p.title }}</h4>
          </a>
        </div>
      {% endfor %}
    </div>
  </div>

  <!-- Next Button -->
  <button class="carousel__nav carousel__nav--next" id="carouselNext" aria-label="Next videos">
    <i class="fa fa-chevron-right"></i>
  </button>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const track = document.getElementById('carouselTrack');
  const prevBtn = document.getElementById('carouselPrev');
  const nextBtn = document.getElementById('carouselNext');
  
  if (!track || !prevBtn || !nextBtn) return;
  
  const items = track.querySelectorAll('.carousel__item');
  const itemWidth = items[0] ? items[0].offsetWidth + 20 : 0; // width + gap
  let currentPosition = 0;
  
  // Find active item and center it initially
  const activeItem = track.querySelector('.video-card--active');
  if (activeItem) {
    const activeIndex = Array.from(items).indexOf(activeItem.closest('.carousel__item'));
    const visibleItems = Math.floor(track.parentElement.offsetWidth / itemWidth);
    const centerOffset = Math.floor(visibleItems / 2);
    currentPosition = Math.max(0, activeIndex - centerOffset);
    updateCarousel();
  }
  
  function updateCarousel() {
    const maxPosition = Math.max(0, items.length - Math.floor(track.parentElement.offsetWidth / itemWidth));
    currentPosition = Math.max(0, Math.min(currentPosition, maxPosition));
    
    track.style.transform = `translateX(-${currentPosition * itemWidth}px)`;
    
    // Update button states
    prevBtn.disabled = currentPosition === 0;
    nextBtn.disabled = currentPosition >= maxPosition;
  }
  
  function moveCarousel(direction) {
    const visibleItems = Math.floor(track.parentElement.offsetWidth / itemWidth);
    currentPosition += direction * visibleItems;
    updateCarousel();
  }
  
  prevBtn.addEventListener('click', () => moveCarousel(-1));
  nextBtn.addEventListener('click', () => moveCarousel(1));
  
  // Handle resize
  let resizeTimeout;
  window.addEventListener('resize', function() {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(updateCarousel, 250);
  });
  
  // Handle touch/swipe for mobile
  let touchStartX = 0;
  let touchEndX = 0;
  
  track.addEventListener('touchstart', function(e) {
    touchStartX = e.changedTouches[0].screenX;
  });
  
  track.addEventListener('touchend', function(e) {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  });
  
  function handleSwipe() {
    const swipeThreshold = 50;
    const diff = touchStartX - touchEndX;
    
    if (Math.abs(diff) > swipeThreshold) {
      if (diff > 0) {
        moveCarousel(1); // Swipe left, move right
      } else {
        moveCarousel(-1); // Swipe right, move left
      }
    }
  }
});

// Add playing class when video starts
document.addEventListener('DOMContentLoaded', function() {
  const playerVideo = document.querySelector('.player__video');
  if (!playerVideo) return;
  
  // Listen for Wistia video play event
  window._wq = window._wq || [];
  _wq.push({ id: "_all", onReady: function(video) {
    video.bind('play', function() {
      playerVideo.classList.add('playing');
    });
    
    video.bind('pause', function() {
      playerVideo.classList.remove('playing');
    });
    
    video.bind('end', function() {
      playerVideo.classList.remove('playing');
    });
  }});
});
</script>