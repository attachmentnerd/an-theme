{% comment %}
  Premium Micro-Interactions Library
  Adds sophisticated animations and interactions to elements
  Usage: {% include 'micro_interactions' %}
{% endcomment %}

<style>
  /* ==========================================================================
     Premium Micro-Interactions
     ========================================================================== */
  
  /* Magnetic Button Effect */
  .btn-magnetic {
    position: relative;
    transition: transform 0.2s ease;
  }
  
  /* Card Tilt Effect */
  .card-tilt {
    transform-style: preserve-3d;
    transition: transform 0.3s ease;
  }
  
  .card-tilt:hover {
    transform: perspective(1000px) rotateY(5deg) rotateX(-5deg);
  }
  
  /* Text Reveal Animation */
  .text-reveal {
    position: relative;
    overflow: hidden;
  }
  
  .text-reveal::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    transition: left 0.5s ease;
  }
  
  .text-reveal:hover::after {
    left: 100%;
  }
  
  /* Morphing Shape Hover */
  .shape-morph {
    border-radius: 12px;
    transition: border-radius 0.3s ease;
  }
  
  .shape-morph:hover {
    border-radius: 50% 20% 50% 20%;
  }
  
  /* Glitch Effect */
  @keyframes glitch {
    0%, 100% { 
      transform: translate(0);
      filter: hue-rotate(0deg);
    }
    20% { 
      transform: translate(-1px, 1px);
      filter: hue-rotate(90deg);
    }
    40% { 
      transform: translate(-1px, -1px);
      filter: hue-rotate(180deg);
    }
    60% { 
      transform: translate(1px, 1px);
      filter: hue-rotate(270deg);
    }
    80% { 
      transform: translate(1px, -1px);
      filter: hue-rotate(360deg);
    }
  }
  
  .glitch-hover:hover {
    animation: glitch 0.3s ease;
  }
  
  /* Smooth Number Counter */
  .counter {
    display: inline-block;
    font-variant-numeric: tabular-nums;
  }
  
  /* Elastic Pop */
  @keyframes elasticPop {
    0% { transform: scale(1); }
    30% { transform: scale(1.25); }
    40% { transform: scale(0.75); }
    50% { transform: scale(1.15); }
    65% { transform: scale(0.95); }
    75% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }
  
  .elastic-pop:hover {
    animation: elasticPop 0.6s ease;
  }
  
  /* Underline Draw */
  .underline-draw {
    position: relative;
    text-decoration: none;
  }
  
  .underline-draw::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background: var(--c-brand-600);
    transition: width 0.3s ease;
  }
  
  .underline-draw:hover::after {
    width: 100%;
  }
  
  /* Icon Rotate */
  .icon-rotate {
    transition: transform 0.3s ease;
  }
  
  .icon-rotate:hover {
    transform: rotate(360deg);
  }
  
  /* Parallax Depth */
  .parallax-card {
    position: relative;
    transform-style: preserve-3d;
  }
  
  .parallax-card > * {
    transition: transform 0.3s ease;
  }
  
  .parallax-card:hover > *:nth-child(1) {
    transform: translateZ(20px);
  }
  
  .parallax-card:hover > *:nth-child(2) {
    transform: translateZ(40px);
  }
  
  .parallax-card:hover > *:nth-child(3) {
    transform: translateZ(60px);
  }
  
  /* Smooth Accordion */
  .accordion-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease, padding 0.3s ease;
  }
  
  .accordion-content.is-open {
    max-height: 500px;
    padding: 1rem 0;
  }
  
  /* Progress Fill */
  .progress-fill {
    position: relative;
    overflow: hidden;
  }
  
  .progress-fill::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: var(--c-brand-600);
    transition: left 0.6s ease;
    z-index: -1;
  }
  
  .progress-fill:hover::before {
    left: 0;
  }
  
  .progress-fill:hover {
    color: white;
  }
  
  /* Tooltip Appear */
  .has-tooltip {
    position: relative;
  }
  
  .has-tooltip::before {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) translateY(10px);
    background: rgba(0,0,0,0.9);
    color: white;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 12px;
    white-space: nowrap;
    opacity: 0;
    pointer-events: none;
    transition: all 0.2s ease;
  }
  
  .has-tooltip:hover::before {
    opacity: 1;
    transform: translateX(-50%) translateY(-5px);
  }
  
  /* Breathing Animation */
  @keyframes breathe {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }
  
  .breathe {
    animation: breathe 3s ease-in-out infinite;
  }
  
  /* Particle Effect Container */
  .particle-container {
    position: relative;
    overflow: hidden;
  }
  
  .particle {
    position: absolute;
    pointer-events: none;
    opacity: 0;
    animation: particleFloat 2s ease-out forwards;
  }
  
  @keyframes particleFloat {
    0% {
      opacity: 1;
      transform: translate(0, 0) scale(0);
    }
    100% {
      opacity: 0;
      transform: translate(var(--x), -100px) scale(1);
    }
  }
</style>

<script>
  // Premium Interactions JavaScript
  document.addEventListener('DOMContentLoaded', function() {
    
    // Magnetic buttons
    document.querySelectorAll('.btn-magnetic').forEach(btn => {
      btn.addEventListener('mousemove', (e) => {
        const rect = btn.getBoundingClientRect();
        const x = e.clientX - rect.left - rect.width / 2;
        const y = e.clientY - rect.top - rect.height / 2;
        
        btn.style.transform = `translate(${x * 0.2}px, ${y * 0.2}px)`;
      });
      
      btn.addEventListener('mouseleave', () => {
        btn.style.transform = 'translate(0, 0)';
      });
    });
    
    // Smooth number counter
    const animateCounter = (element) => {
      const target = parseInt(element.getAttribute('data-target'));
      const duration = 2000;
      const increment = target / (duration / 16);
      let current = 0;
      
      const updateCounter = () => {
        current += increment;
        if (current < target) {
          element.textContent = Math.floor(current);
          requestAnimationFrame(updateCounter);
        } else {
          element.textContent = target;
        }
      };
      
      updateCounter();
    };
    
    // Intersection observer for counters
    const counterObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && !entry.target.classList.contains('counted')) {
          entry.target.classList.add('counted');
          animateCounter(entry.target);
        }
      });
    });
    
    document.querySelectorAll('.counter').forEach(counter => {
      counterObserver.observe(counter);
    });
    
    // Particle effects on click
    document.querySelectorAll('.particle-container').forEach(container => {
      container.addEventListener('click', (e) => {
        const rect = container.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        for (let i = 0; i < 8; i++) {
          const particle = document.createElement('div');
          particle.className = 'particle';
          particle.style.left = x + 'px';
          particle.style.top = y + 'px';
          particle.style.width = '6px';
          particle.style.height = '6px';
          particle.style.background = 'var(--c-brand-600)';
          particle.style.borderRadius = '50%';
          particle.style.setProperty('--x', (Math.random() - 0.5) * 100 + 'px');
          
          container.appendChild(particle);
          
          setTimeout(() => particle.remove(), 2000);
        }
      });
    });
    
    // 3D card tilt
    document.querySelectorAll('.card-tilt').forEach(card => {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = (e.clientX - rect.left) / rect.width;
        const y = (e.clientY - rect.top) / rect.height;
        
        const tiltX = (y - 0.5) * 20;
        const tiltY = (x - 0.5) * -20;
        
        card.style.transform = `perspective(1000px) rotateX(${tiltX}deg) rotateY(${tiltY}deg)`;
      });
      
      card.addEventListener('mouseleave', () => {
        card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)';
      });
    });
    
    // Smooth accordion
    document.querySelectorAll('.accordion-trigger').forEach(trigger => {
      trigger.addEventListener('click', () => {
        const content = trigger.nextElementSibling;
        content.classList.toggle('is-open');
      });
    });
  });
</script>