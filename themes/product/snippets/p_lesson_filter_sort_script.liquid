<script>
  function object_for_filters(DOM, allLessons) {
    var allLessons = []

    // loop
    {% for category in current_product.categories %}
      {% for post in category.posts %}
        {% assign progress = post.progress_percent | divided_by:10 | round  | times:10 %}
        {% assign duration = post.video.duration_in_seconds | duration | replace:"minutes","" | replace:"minute",""  | replace:"Less than","" | strip %}
        {%include "liquid_object" post: post%}

        // loopend
      {% endfor %}
      {% if category.children? %}
        {% for sub_category in category.subcategories %}
          {%for post in sub_category.posts%}
            {%include "liquid_object" post: post%}

            // loopend
          {%endfor%}

          // loopend
        {% endfor %}

        // loopend
      {% endif %}

      // loopend
      // loopend
    {% endfor %}

    // loopend
    return allLessons
  }
  function object_for_sort(lessonHtml) {
    var allLessons = []
    lessonHtml.children('.blog_post_container').each(function(i) {
      var lesson_info = {}
      lesson_info["title"] = $(this)
        .find('.elm_type_post_title')
        .children(':not(style)')
        .text()
      lesson_info["description"] = $(this)
        .find('.elm_type_post_body')
        .children(':not(style)')
        .text()
      lesson_info["DOM"] = $(this)[0].outerHTML
      lesson_info["duration"] = $(this).attr("duration")
      lesson_info["index"] = i
      lesson_info["postId"] = $(this).attr("post-id")
      $(this).addClass('for_search')
      lesson_info["custom_fields"] = {}

      var custom_field_data = $(this).find(".feature-d-body")
      var custom_tags_data = $(this).find(".tags-d-body")
      var related_data = $(this).find(".related-d-body")
      if (related_data.length) {
        related_data = related_data.html()
        var relatedObj = related_data.match(/(?<=\<!--related_data)(.*?)(?=-->)/gm)[0].trim()
        relatedObj = JSON.parse(relatedObj)
        lesson_info["related_posts"] = relatedObj
      }
      if (custom_tags_data.length) {
        custom_tags_data = custom_tags_data.html()
        var tagsObj = custom_tags_data.match(/(?<=\<!--tag)(.*?)(?=-->)/gm)
        if (tagsObj) {
          tagsObj = tagsObj[0].trim()
          tagsObj = JSON.parse(tagsObj)
          lesson_info["tags"] = tagsObj.tags
        }

      }
      if (custom_field_data.length) {
        custom_field_data = custom_field_data.html()
        var customFieldObj = custom_field_data.match(/(?<=\<!--custom_field)(.*?)(?=-->)/gm)
        if (customFieldObj) {
          customFieldObj = customFieldObj[0].trim()
          customFieldObj = JSON.parse(customFieldObj)
          customFieldObj = customFieldObj.custom_field
          console.log(customFieldObj)
          for (obj of customFieldObj) {
            lesson_info["custom_fields"][unescapeHtml(Object.keys(obj)[0].toLowerCase())] = unescapeHtml(Object.values(obj)[0].toLowerCase())
          }
        }
      }
      lesson_info["custom_fields"]["category"] = $(this)
        .find('.elm_type_post_category')
        .children(':not(style)')
        .text()
        .trim()
        .toLowerCase()

      allLessons.push(lesson_info)
    })
    return allLessons
  }
  function create_lesson_object(lessons_section, forFilters) {
    var allLessons = []
    var lessonHtml = lessons_section.find('.p_lessons_wrap')
    if (forFilters) {
      lessonHtml.children().hide()
      var loader = lessonLoader()
      lessonHtml.append(loader)
      var DOM = lessonHtml.children('.blog_post_container')[0].outerHTML
      allLessons = object_for_filters(DOM)
    } else {
      allLessons = object_for_sort(lessonHtml)
    }

    // ss
    lessonHtml
      .closest('section')
      .parent()
      .addClass('search_from_section')
    lessonHtml.css('min-height', lessonHtml.height())
    lessonHtml.before(lessonHtml.find('style'))
    return {
      lesson_object: allLessons,
      lessonHtml: lessonHtml
    }

  }


  function lessonLoader() {
    var st = `
    <div class="lesson_loader_wrapper" style="display:block !important">
        <div class="lesson_loader"></div>
    </div>
  `
    return st
  }


  function filter_events(lessonHtml, allLessons) {
    $(".filter_title").click(function() {
      console.log("clickkk")
      $(this).toggleClass("active_acc")
      $(this).siblings().toggleClass("show_filter_accordion")
    })
    $('.lesson-search input').on('keyup blur', function() {
      handleFilters(allLessons, lessonHtml)
    })


    $('.lesson-search-show-completed input').on('change', function() {
      handleFilters(allLessons, lessonHtml)
      if ($(this).is(':checked')) {
        lessonHtml.children(':not(.completed)').hide()
      } else {
        lessonHtml.children(':not(.completed)').show()
      }
    })
    $('.lesson-search-show-favorites input').on('change', function() {
      handleFilters(allLessons, lessonHtml)
    })
    $('.lesson-search-reset button').on('click', function() {
      $('.lesson_custom_filter.select select').prop('selectedIndex', 0)
      $('.lesson_custom_filter.checkbox input, .lesson-search-show-completed.checkbox input, .filter_tag.checkbox input, #search_show_favorites').prop('checked', false)
      if ($(".lesson_custom_filter.range").length != 0) {
        let my_range = $(".lesson_custom_filter.range input").data("ionRangeSlider")
        my_range.update({
          from: $(".lesson_custom_filter.range input").data("min"),
          to: $(".lesson_custom_filter.range input").data("max")
        })
      }
      $('.lesson-search input').val('')
      handleFilters(allLessons, lessonHtml)
    })

    $('.lesson_custom_filter.select select').on('change', function() {
      handleFilters(allLessons, lessonHtml)
    })

    $('.lesson_custom_filter.checkbox input').on('change', function() {
      handleFilters(allLessons, lessonHtml)
    })
    $("body").on("click", ".filter_tag.checkbox input", function() {
      handleFilters(allLessons, lessonHtml)
    })
    if ($(".lesson_custom_filter.range").length != 0) {
      jQuery('#ion_slide').ready(function() {
        console.log('ssss')
        $(".lesson_custom_filter.range input").ionRangeSlider({
          onFinish: function(data) {
            console.log(data)
            handleFilters(allLessons, lessonHtml)
          }
        })
      })
    }
    $(".lesson_custom_filter.range input").on('blur', function() {
      var $inp = $(this)
      var from = $inp.data("from")
      var from2 = $inp.data("to")
      console.log(from, from2)
    })
  }

  function appendTagFilters(allLessons) {
    var allTags = []
    for (lesson of allLessons) {
      if (lesson.tags) {
        allTags.push(...lesson.tags)
      }
    }
    var filteredTags = allTags.reduce((acc, arr) => {
      let found = false
      for (i in acc) {
        if (acc[i] === arr) {
          found = true
        }
      }
      if (! found) {
        acc.push(arr)
      }
      return acc
    }, [])
    console.log(filteredTags)
    $(".tags_filter").html("")
    for (tag of filteredTags) {
      var st = `
        <div class="filter_tag checkbox">
            <input type="checkbox" name="${
        tag
      }" data-title="tag" data-names="checkbox" id="filter_tag">
            <label for="">${
        decodeURIComponent(tag)
      }</label>
        </div>
    `
      $(".tags_filter").append(st)
    }
  }
  function getfiltersFromUrl() {
    if (window
        .location
        .href
        .includes("/search")) {
      var params = new URLSearchParams(window.location.search)
      var search_params = params.get("q")
      console.log(search_params)
      $(".lesson_search_wrapper input").val(search_params)
      var custom_field_params = params.get("custom_fields")
      var tags_params = params.get("tags")
      var favorites_param = params.get("favorites")
      console.log(custom_field_params)
      console.log(tags_params)
      if (favorites_param == "true") {
        $("#search_show_favorites").prop("checked", true)
      }
      if (custom_field_params) {
        var customObj = {}
        for (field of custom_field_params.split("||")) {
          var key = field.split("=")
          if (key[0]) {
            customObj[key[0].trim()] = key[1] && key[1].trim()
          }
        }
        console.log(customObj)

        for (key of Object.keys(customObj)) {
          if (customObj[key] && customObj[key].includes(",")) {
            $(`input[data-title="${key}"][data-names="range"]`).attr("data-from", customObj[key].split(",")[0]).attr("data-to", customObj[key].split(",")[1])
            for (value of customObj[key].split(",")) {
              $(`input[type="checkbox"][name=${
                JSON.stringify(value)
              }i]`).prop("checked", true)

            }
          } else {
            $(`input[type="checkbox"][name=${
              JSON.stringify(customObj[key])

            }i]`).prop("checked", true)
            $(`select[for=${
              JSON.stringify(key)
            }i] option[value=${
              JSON.stringify(customObj[key])
            }i]`).prop("selected", true)
          }
        }
      }
      if (tags_params) {
        if (tags_params.includes(",")) {
          for (tag of tags_params.split(",")) {
            var tagTrim = tag.trim()
            $(`input[type="checkbox"][name="${tagTrim}"i][data-title="tag"]`).prop("checked", true)
          }
        } else {
          $(`input[type="checkbox"][name="${tags_params}"i][data-title="tag"]`).prop("checked", true)
        }

      }

    }
  }
  function setSearchUrl(filters) {
    if (window
        .location
        .href
        .includes("search")) {
      var url = new URL(window.location.href)
      var customParam = ""
      var tagsParam = ""
      var searchParam = ""
      var favoritesParam = ""
      if ($(".lesson_search_wrapper input").val()) {
        searchParam = $(".lesson_search_wrapper input").val()
      }
      for (i in filters) {
        if (filters[i].title && filters[i].title !== "tag" && filters[i].title !== "Favorites") {
          if (filters[i].type && filters[i].type == "range") {
            customParam += `${
              filters[i].title
            } = ${
              [
                filter[i].minValue,
                filter[i].maxValue
              ]
            }||`
          } else {
            customParam += `${
              filters[i].title
            } = ${
              filters[i].value
            }||`
          }
        } else if (filters[i].title == "Favorites") {
          favoritesParam = "true"
        } else {
          tagsParam = `${
            filters[i].value
          }`
        }
      }
      let appendParams = url.searchParams
      appendParams.set("q", searchParam)

      appendParams.set("custom_fields", customParam)
      appendParams.set("tags", tagsParam)
      appendParams.set("favorites", favoritesParam)

      history.pushState({}, null, url)
    }
  }
  const combinedItems = (arr = []) => {
    const res = arr.reduce((acc, obj) => {
      let found = false
      for (i in acc) {
        if (acc[i].title === obj.title) {
          found = true
          if (obj.type == "checkbox") {
            acc[i].value.push(...obj.value)
          }
        }
      }
      if (! found) {
        acc.push(obj)
      }
      return acc
    }, [])
    return res
  }
  function handleFilters(allLessons, lessonHtml) {
    var loader = lessonLoader()
    lessonHtml.html(loader)
    var filters = []
    console.log('sss')
    var search = $('.lesson-search input').val().toLowerCase()
    if ($(".lesson-search-show-favorites input").is(":checked")) {
      var filterSelect = {}
      filterSelect.title = "Favorites"
      filterSelect.value = [$(".lesson-search-show-favorites input").attr("name")]
      filterSelect.type = "checkbox"
      filters.push(filterSelect)
    }
    $('.lesson_custom_filter.select select, .lesson_custom_filter.checkbox input:checked, .filter_tag input:checked').each(function() {
      var value = $(this).parent().hasClass('checkbox') ? $(this).attr('name') : $(this).val()
      if (value) {
        var filterSelect = {}
        filterSelect.title = $(this).attr('for') || $(this).data('title')
        filterSelect.value = [value.trim()]
        filterSelect.type = $(this).data('names')
        filters.push(filterSelect)
      }

    })
    $(".lesson_custom_filter.range input").each(function() {
      if ($(this).data("from") != $(this).data("min") || $(this).data("to") != $(this).data("max")) {
        var filterSelect = {}
        filterSelect.title = $(this).data('title')
        filterSelect.minValue = $(this).data("from")
        filterSelect.maxValue = $(this).data("to")
        filterSelect.type = $(this).data('names')
        filters.push(filterSelect)
      }
    })


    filters = combinedItems(filters)

    setSearchUrl(filters)


    if ($(".n_p_lesson_search .selected_filters").length == 0) {
      $(".n_p_lesson_search .search_title").after("<div class='selected_filters on_filters'></div>")
      lessonHtml.before("<div class='selected_filters on_lessons'></div>")
    }
    $(".selected_filters").html("")
    if (filters.length) {
      for (filter of filters) {
        if (filter.type != "range") {
          filter.value.map(value => $(".selected_filters").append(`<div class="selected_filter">${
            decodeURIComponent(value)
          }</div>`))
        } else {
          (".selected_filters").append(`<div class="selected_filter">${
            decodeURIComponent(filter.title)
          }</div>`)
        }
      }
    }
    var lesson = loopLessons(search, filters, allLessons)
    Promise.resolve(lesson).then(() => {

      var htmlString = lesson.htmlString
      var index = lesson.index

      lessonHtml.append(htmlString)

      setTimeout(function() {
        $(".lesson_loader_wrapper").remove()
        lessonHtml.children().css("display", "flex")
        if ($(".blog_post_container").length == 0 && $(".no_lesson").length == 0) {
          lessonHtml.append("<p class='no_lesson'>No Lessons Found</p>")
        }
      }, 1000)
      if (filters.length || search != "") {
        numberOfLessonsFound(index, lessonHtml)
      } else if (allLessons.length > 100) {
        var st = `
        <div class="posts-found">
            <span> Showing ${index} of ${
          allLessons.length
        } Posts </span>
        </div>
      `
        lessonHtml
          .siblings(".blog_section_heading_wrap")
          .children(".posts-found")
          .remove()
        lessonHtml.siblings(".blog_section_heading_wrap").append(st)
      } else {
        lessonHtml
          .siblings(".blog_section_heading_wrap")
          .children(".posts-found")
          .remove()
      }
    })

  }
  function loopLessons(search, filters, allLessons) {
    var index = 0
    var htmlString = ``
    console.log(filters)
    for (lesson of allLessons) {
      var show_this_post = true
      var allMatch = true
      if (search != "" ? lesson
          .title
          .toLowerCase()
          .includes(search) || lesson
          .body
          .toLowerCase()
          .includes(search) || Object.values(lesson.custom_fields).includes(search) : true) {
        if (filters.length) {
          for (filter of filters) {
            if (filter.type != "range") {
              var filter_value = filter.value.map(value => value.toLowerCase())
              if (filter_value.includes(lesson.custom_fields[filter.title.toLowerCase()]) && allMatch) {
                show_this_post = true
                allMatch = true
              } else if (lesson.tags && lesson.tags.some((elm) => filter_value.includes(elm.toLowerCase())) && allMatch) {
                show_this_post = true
                allMatch = true
              } else if (filter.title == "Favorites" && lesson.isFavorited == "true") {
                show_this_post = true
                allMatch = true
              } else {
                allMatch = false
                show_this_post = false
              }
            } else {
              $(".selected_filters").append(`<div class="selected_filter">${
                decodeURIComponent(filter.title)
              }</div>`)
              if (lesson.custom_fields[filter.title.toLowerCase()] >= Number(filter.minValue) && lesson.custom_fields[filter.title.toLowerCase()] <= Number(filter.maxValue) && allMatch) {
                show_this_post = true
                allMatch = true
              } else {
                allMatch = false
                show_this_post = false
              }
            }
          }
        }
        if (show_this_post && allMatch) {
          index++
          if (index < 100) {
            htmlString += lesson.DOM
          } else {
            break
          }

        }
      }
    }
    return {
      htmlString: htmlString,
      index: index
    }
  }
  function numberOfLessonsFound(index, lessonHtml) {
    var st = `
    <div class="posts-found">
        <span> ${index} Posts Found
    </div>
  `
    lessonHtml
      .siblings(".blog_section_heading_wrap")
      .children(".posts-found")
      .remove()
    lessonHtml.siblings(".blog_section_heading_wrap").append(st)
  }

  // Sorting

  function sortLesson($this, lessonObj, lessonHtml, custom_sort) {
    var val = $this.val()

    if (val) {
      if (val == "name_asc") {
        lessonObj.sort((a, b) => (a.title > b.title) ? 1 : -1)
      } else if (val == "name_dsc") {
        lessonObj.sort((a, b) => (a.title < b.title) ? 1 : -1)
      } else if (val == "duration") {
        lessonObj.sort((a, b) => (Number(a.duration) > Number(b.duration)) ? 1 : -1)
      } else if (val == "category") {
        lessonObj.sort((a, b) => (a.index > b.index) ? 1 : -1)
      }
      if (custom_sort.length) {
        for (option of custom_sort) {
          if (val.toLowerCase() == Object.keys(option)[0].toLowerCase()) {
            if (Object.values(option)[0] == "name") {
              lessonObj.sort((a, b) => {
                if (!a.custom_fields[val]) {
                  return 1
                } else {
                  if (parseInt(a.custom_fields[val])) {
                    return Number(a.custom_fields[val]) > Number(b.custom_fields[val]) ? 1 : -1
                  }
                  return a.custom_fields[val] > b.custom_fields[val] ? 1 : -1
                }
              })
            } else {
              var custom_sort_order = Object.values(option)[0]
              custom_sort_order = custom_sort_order.split(",")
              var custom_sort_order_filtered = []
              for (order of custom_sort_order) {
                custom_sort_order_filtered.push(order.trim().toLowerCase())
              }
              console.log(custom_sort_order_filtered)
              lessonObj.sort((a, b) => {
                if (!a.custom_fields[val]) {
                  return 1
                } else {
                  if (parseInt(a.custom_fields[val])) {
                    return Number(a.custom_fields[val]) > Number(b.custom_fields[val]) ? 1 : -1
                  }
                  return custom_sort_order_filtered.indexOf(a.custom_fields[val]) - custom_sort_order_filtered.indexOf(b.custom_fields[val])
                }
              })
            }
          }
        }
      }
      console.log(lessonObj)
      printSortedLesson(lessonObj, lessonHtml)
    }
  }

  function printSortedLesson(lessonObj, lessonHtml) {
    lessonHtml.html("")

    for (lesson of lessonObj) {
      lessonHtml.append(lesson.DOM)
      lessonHtml.children().show()
    }
  }

  function customSort(sortSyntax) {
    console.log(sortSyntax)
    var sortArr = sortSyntax.split("|")
    console.log(sortArr)
    var sort_by = []
    for (arr of sortArr) {
      var sort_by_obj = {}
      var option = ""
      if (arr.includes(":")) {
        option = arr.split(":")[0].trim()
        sort_by_obj[option] = arr.split(":")[1].trim()
      } else {
        option = arr.trim()
        sort_by_obj[option] = "name"

      } sort_by.push(sort_by_obj)
    }
    return sort_by
  }

  function unescapeHtml(unsafe) {
    if (unsafe) {
      return unsafe
        .replace(/&amp;/g, "&")
        .replace(/&lt;/g, "<")
        .replace(/&gt;/g, ">")
        .replace(/&quot;/g, "\"")
        .replace(/&#039;/g, "'")
        .replace(/&#x2f;/g, "/")
    }

  }
</script>
