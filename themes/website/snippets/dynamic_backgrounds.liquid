{% comment %}
  Dynamic Background Effects Library
  Adds animated, living backgrounds to hero sections
  Usage: {% include 'dynamic_backgrounds' %}
{% endcomment %}

<style>
  /* ==========================================================================
     Dynamic Background Effects
     ========================================================================== */

  /* Base dynamic background container */
  .dynamic-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: 0;
  }

  .dynamic-bg-content {
    position: relative;
    z-index: 1;
  }

  /* 1. Animated Gradient Background */
  .gradient-shift {
    background: linear-gradient(
      -45deg,
      var(--c-brand-100),
      var(--c-accent-peach, #FF8BCB),
      var(--c-brand-600),
      var(--c-accent-teal, #18D5E4)
    );
    background-size: 400% 400%;
    animation: gradientShift 15s ease infinite;
  }

  @keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  /* 2. Floating Orbs/Particles */
  .orb-container {
    position: absolute;
    width: 100%;
    height: 100%;
    filter: blur(40px);
    opacity: 0.7;
  }

  .floating-orb {
    position: absolute;
    border-radius: 50%;
    animation: floatOrb 20s infinite ease-in-out;
  }

  .orb-1 {
    width: 400px;
    height: 400px;
    background: radial-gradient(circle at 30% 30%, var(--c-accent-teal), transparent);
    top: -200px;
    left: -100px;
    animation-duration: 25s;
  }

  .orb-2 {
    width: 300px;
    height: 300px;
    background: radial-gradient(circle at 30% 30%, var(--c-accent-peach), transparent);
    bottom: -150px;
    right: -50px;
    animation-duration: 20s;
    animation-delay: -5s;
  }

  .orb-3 {
    width: 350px;
    height: 350px;
    background: radial-gradient(circle at 30% 30%, var(--c-brand-600), transparent);
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    animation-duration: 30s;
    animation-delay: -10s;
  }

  @keyframes floatOrb {
    0%, 100% {
      transform: translate(0, 0) scale(1);
    }
    33% {
      transform: translate(30px, -30px) scale(1.1);
    }
    66% {
      transform: translate(-20px, 20px) scale(0.9);
    }
  }

  /* 3. Morphing Blob Background */
  .blob-container {
    position: absolute;
    width: 100%;
    height: 100%;
    filter: blur(30px);
    opacity: 0.6;
  }

  .morphing-blob {
    position: absolute;
    background: var(--c-brand-600);
    animation: morphBlob 20s infinite ease-in-out;
  }

  @keyframes morphBlob {
    0%, 100% {
      border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
      transform: rotate(0deg) scale(1);
    }
    25% {
      border-radius: 30% 60% 70% 40% / 50% 60% 30% 60%;
      transform: rotate(90deg) scale(1.1);
    }
    50% {
      border-radius: 40% 60% 60% 40% / 70% 30% 40% 60%;
      transform: rotate(180deg) scale(0.9);
    }
    75% {
      border-radius: 70% 30% 40% 60% / 40% 70% 60% 30%;
      transform: rotate(270deg) scale(1.05);
    }
  }

  /* 4. Mesh Gradient (CSS Paint API fallback) */
  .mesh-gradient {
    background:
      radial-gradient(at 40% 20%, var(--c-accent-teal) 0px, transparent 50%),
      radial-gradient(at 80% 0%, var(--c-brand-100) 0px, transparent 50%),
      radial-gradient(at 0% 50%, var(--c-accent-peach) 0px, transparent 50%),
      radial-gradient(at 80% 80%, var(--c-brand-600) 0px, transparent 50%),
      radial-gradient(at 0% 100%, var(--c-accent-lemon) 0px, transparent 50%);
    animation: meshMove 20s ease infinite;
  }

  @keyframes meshMove {
    0%, 100% { transform: translate(0, 0) rotate(0deg); }
    50% { transform: translate(-20px, -20px) rotate(180deg); }
  }

  /* 5. Wave Pattern */
  .wave-bg {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100px;
    background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1440 100'%3E%3Cpath fill='%235E3BFF' fill-opacity='0.1' d='M0,50 C360,100 720,0 1440,50 L1440,100 L0,100 Z'%3E%3C/path%3E%3C/svg%3E");
    animation: waveMove 10s linear infinite;
  }

  @keyframes waveMove {
    0% { transform: translateX(0); }
    100% { transform: translateX(-1440px); }
  }

  /* 6. Geometric Patterns */
  .geo-pattern {
    position: absolute;
    width: 100%;
    height: 100%;
    opacity: 0.05;
    background-image:
      repeating-linear-gradient(45deg, var(--c-brand-600) 0, var(--c-brand-600) 1px, transparent 1px, transparent 15px),
      repeating-linear-gradient(-45deg, var(--c-brand-600) 0, var(--c-brand-600) 1px, transparent 1px, transparent 15px);
    animation: geoShift 30s linear infinite;
  }

  @keyframes geoShift {
    0% { transform: translate(0, 0); }
    100% { transform: translate(30px, 30px); }
  }

  /* 7. Noise Texture Overlay */
  .noise-overlay {
    position: absolute;
    width: 100%;
    height: 100%;
    opacity: 0.03;
    mix-blend-mode: multiply;
  }

  .noise-overlay::before {
    content: '';
    position: absolute;
    top: -100%;
    left: -100%;
    width: 300%;
    height: 300%;
    background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100'%3E%3Cfilter id='noise'%3E%3CfeTurbulence baseFrequency='0.9' /%3E%3C/filter%3E%3Crect width='100' height='100' filter='url(%23noise)' opacity='0.5'/%3E%3C/svg%3E");
    animation: noiseMove 8s steps(10) infinite;
  }

  @keyframes noiseMove {
    0% { transform: translate(0, 0); }
    10% { transform: translate(-5%, -5%); }
    20% { transform: translate(-10%, 5%); }
    30% { transform: translate(5%, -10%); }
    40% { transform: translate(-5%, 15%); }
    50% { transform: translate(-10%, 5%); }
    60% { transform: translate(15%, 0); }
    70% { transform: translate(0, 10%); }
    80% { transform: translate(-15%, 0); }
    90% { transform: translate(10%, 5%); }
    100% { transform: translate(5%, 0); }
  }

  /* 8. Aurora Effect */
  .aurora-bg {
    position: absolute;
    width: 100%;
    height: 100%;
    background: linear-gradient(to bottom, transparent, var(--c-brand-100));
  }

  .aurora {
    position: absolute;
    width: 200%;
    height: 200%;
    left: -50%;
    top: -50%;
    background: radial-gradient(ellipse at center, transparent 0%, var(--c-accent-teal) 30%, transparent 70%);
    filter: blur(60px);
    opacity: 0.3;
    animation: aurora 15s ease-in-out infinite;
  }

  @keyframes aurora {
    0%, 100% {
      transform: rotate(0deg) translateY(0);
    }
    50% {
      transform: rotate(180deg) translateY(-50px);
    }
  }

  /* 9. Particle Field */
  .particle-field {
    position: absolute;
    width: 100%;
    height: 100%;
  }

  .particle {
    position: absolute;
    width: 4px;
    height: 4px;
    background: var(--c-brand-600);
    border-radius: 50%;
    opacity: 0.6;
    animation: particleFloat 20s linear infinite;
  }

  @keyframes particleFloat {
    from {
      transform: translateY(100vh) rotate(0deg);
      opacity: 0;
    }
    10% {
      opacity: 0.6;
    }
    90% {
      opacity: 0.6;
    }
    to {
      transform: translateY(-100vh) rotate(360deg);
      opacity: 0;
    }
  }

  /* Performance optimization */
  @media (prefers-reduced-motion: reduce) {
    .gradient-shift,
    .floating-orb,
    .morphing-blob,
    .mesh-gradient,
    .wave-bg,
    .geo-pattern,
    .noise-overlay::before,
    .aurora {
      animation: none;
    }
  }

  /* Mobile optimizations */
  @media (max-width: 768px) {
    .orb-container,
    .blob-container {
      filter: blur(60px); /* More blur on mobile for performance */
    }

    .floating-orb,
    .morphing-blob {
      animation-duration: 30s; /* Slower animations on mobile */
    }
  }
</style>

<script>
  // Dynamic background enhancements
  document.addEventListener('DOMContentLoaded', function() {
    // Respect reduced motion and small screens
    var enableFX = false;
    try {
      enableFX = window.matchMedia && window.matchMedia('(prefers-reduced-motion: no-preference)').matches && window.innerWidth >= 768;
    } catch(e) { enableFX = window.innerWidth >= 768; }

    // Only proceed if effects are enabled and elements exist
    const dynamicBgs = document.querySelectorAll('.dynamic-bg');
    if (!enableFX || !dynamicBgs.length) return;

    // Add parallax effect to orbs based on mouse movement

    dynamicBgs.forEach(bg => {
      if (bg.classList.contains('orb-container') || bg.classList.contains('blob-container')) {
        bg.addEventListener('mousemove', (e) => {
          const rect = bg.getBoundingClientRect();
          const x = (e.clientX - rect.left) / rect.width - 0.5;
          const y = (e.clientY - rect.top) / rect.height - 0.5;

          bg.querySelectorAll('.floating-orb, .morphing-blob').forEach((element, index) => {
            const speed = (index + 1) * 0.02;
            element.style.transform = `translate(${x * speed * 100}px, ${y * speed * 100}px)`;
          });
        });
      }
    });

    // Intersection observer for performance
    const bgObserver = 'IntersectionObserver' in window ? new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.style.animationPlayState = 'running';
        } else {
          entry.target.style.animationPlayState = 'paused';
        }
      });
    }) : null;

    // Pause animations when not in viewport
    if (bgObserver) {
      document.querySelectorAll('.gradient-shift, .orb-container, .blob-container').forEach(function(el){ bgObserver.observe(el); });
    }

    // Generate particles
    document.querySelectorAll('.particle-field').forEach(field => {
      const particleCount = window.innerWidth > 768 ? 20 : 10;

      for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 20 + 's';
        particle.style.animationDuration = 15 + Math.random() * 10 + 's';
        field.appendChild(particle);
      }
    });
  });
</script>
